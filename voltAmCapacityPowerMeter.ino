/*     Voltmeter ampmeter capacitymeter powermeter energymeter

   Workbench homemade lab power supply to monitor voltage, amperage, capacity, current power
   and power used since startup.
   I needed a currentmeter on the high side of the power line. The ones I found online
   all measured the current on the low side. So I came up with this that can be used on the
   high OR low side. The ACS712 used in this project is the 20A type.
   The accuracy of the 10 bit ADC of the Arduino is 5V / 2^10 = 4,88mV per step ( 2^10 = 1024).
   The ADS1115 on the other hand has 15 bits and one bit for "plus" or "minus" which results 
   in 6.144 ( = default gain amplifier of the ADC) / 2^15 = 0.187mV. The ADS1115 has four 
   analog inputs it is easy to connect the voltage divider and the current sensor to this 
   module. The maximum sample rate for the ADS1115 is 860 times per second so the delay 
   between readings has to be at least 2 milliseconds.

   The resolution of the 10 bits ADC of the arduino for the current is about 48.8mA per step.
   The resolution of the 15 bits ADC of the ADS1115 for the current is 1.875mA per step.

   The display will be updated every 500 milliseconds.
   All information has to be visible at one screen with the focus on voltage and current.

   Following hardware is used to perform the monitoring:
      - Arduino Nano
      - ST7735 full color 1.8 inch SPI display 128 x 160
      - ACS712 Â± 20A current sensor
      - voltage divider with R1 and R2 ( R1 connected to Vin and R2 to an Arduino pin and Gnd
      - ADS1115 I2C voltage sensor

       _________________________________________
      |  1  |  2    3    4    5    6    7    8  |
      | VCC | GND  CS   RST  D/C  SDA  SCK  LED | PINOUT SPI TFT 1.8 inch
      |_____|___________________________________|

    Arduino   ST7735      ACS712     ADS1115

       5V    VCC/LED       VCC         VCC  
      GND      GND         GND         GND  
       D7      RST
       D8     A0/DC
       D9      CS
      D11    SDA/MOSI
      D13      SCK
       A4                              SDA
       A5                              SCL
                           OUT        ads.A0
                                      ads.A1      out on resistor divider


   LICENCE
   Copyright December 2022 Robert de Beer

   Licensed under the Apache License, Version 2.0 ( the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at:

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

     With debugging OFF:
   Sketch uses     23616 bytes = 76% of program memory
   Global variables  578 bytes = 28% of dynamic memory
*/


#include <ADS1X15.h>                                // ADS1115 library Rob Tillaart https://github.com/RobTillaart/ADS1X15
#include <TFT_ST7735.h>                             // tft library Bodmer http://www.instructables.com/id/Arduino-TFT-display-and-font-library/

#define outputToSerial 0                            // for debugging, 0 = off, 1 = on

float voltArduino = 4.99;                           // measured with DVM

const unsigned char startupBitmap[] PROGMEM = {     // just for fun
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xbd, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x3e, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xf8, 0x77, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0x7c, 0xc1, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0x0f, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
0x00, 0x00, 0xc0, 0x3f, 0x83, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x03, 0xfb, 0xf1, 0x81, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
0x00, 0x06, 0x7f, 0xa1, 0x80, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xe0, 0x00, 
0x00, 0x1c, 0x00, 0x03, 0x80, 0xff, 0xff, 0xe3, 0xf8, 0x00, 0x0f, 0xff, 0xf0, 0x00, 
0x02, 0xf0, 0x00, 0x03, 0x00, 0xff, 0xff, 0x00, 0x7f, 0x00, 0x03, 0xff, 0xf8, 0x00, 
0x03, 0xe0, 0x00, 0x07, 0x03, 0xff, 0xf8, 0x03, 0xff, 0x80, 0x01, 0xff, 0xf8, 0x00, 
0x03, 0x80, 0x00, 0x06, 0x0f, 0xff, 0xfe, 0x0f, 0xff, 0xf0, 0x00, 0x7f, 0xf8, 0x00, 
0x07, 0x00, 0x00, 0x0c, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x1f, 0xfc, 0x00, 
0x06, 0x00, 0x00, 0x38, 0x7f, 0xfb, 0xe8, 0xff, 0xff, 0x87, 0x80, 0x03, 0xfe, 0x00, 
0x0c, 0x00, 0x00, 0x61, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x80, 0xf8, 0x01, 0xfe, 0x00, 
0x18, 0x00, 0x01, 0x87, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0x80, 0x2f, 0x00, 0x3e, 0x00, 
0x70, 0x00, 0x04, 0x0f, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x03, 0xe8, 0x1e, 0x00, 
0x60, 0x00, 0x10, 0x3f, 0xfc, 0x00, 0xff, 0xff, 0xfe, 0x2f, 0x80, 0x15, 0x0e, 0x00, 
0x80, 0x00, 0x60, 0x7f, 0xf8, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x06, 0x00, 
0x00, 0x00, 0x80, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0x83, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x05, 0x07, 0xff, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0c, 0x0f, 0xfe, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x18, 0x1f, 0xf8, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x30, 0x3f, 0xf0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xe0, 0x7f, 0xe1, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x80, 0xff, 0xc3, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x03, 0x01, 0xff, 0x87, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x06, 0x03, 0xff, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x08, 0x07, 0xfe, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xfc, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0xf8, 0x07, 0xff, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xf0, 0x03, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xe0, 0x01, 0xf0, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 
0x01, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 
0x03, 0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 
0x07, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x07, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x0f, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
0x3f, 0xf0, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
0x3f, 0xe0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x7f, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x02, 0x1e, 0x60, 0xf8, 0x00, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0x0c, 0x77, 0x43, 0xb8, 0x00, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x39, 0x83, 0xc6, 0x0e, 0x00, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x01, 0xe2, 0x01, 0x9c, 0x0c, 0x00, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x0f, 0xc6, 0x03, 0x10, 0x0c, 0x00, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x7f, 0x0c, 0x03, 0x30, 0x08, 0x00, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x03, 0xfe, 0x18, 0x06, 0x60, 0x18, 0x00, 
0x7f, 0xf8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x3f, 0xf8, 0x10, 0x0c, 0xc0, 0x30, 0x00, 
0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x30, 0x0c, 0x80, 0x60, 0x00, 
0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x30, 0x38, 0xc0, 0xc0, 0x00, 
0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0xf0, 0xc3, 0x00, 0x00, 
0x1f, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x1f, 0x30, 0xfd, 0x00, 0x00, 
0x1f, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x1d, 0x60, 0x50, 0x00, 0x00, 
0x0f, 0xff, 0xff, 0xe4, 0xbf, 0xff, 0xff, 0x80, 0x01, 0xc0, 0xc0, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0x81, 0x80, 0x00, 0x00, 0x00, 
0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

char buf[8];
char pwrVar[12];
char capVar[12];
char nrgVar[12];

const int screenUpdateMs = 500;                     // time between screen updates

int rawCurrentRead;
int rawVoltageRead;

const float R1 = 335.10;                            // voltage divider measured with DVM in kOhm
const float R2 =  47.02;                            // voltage divider measured with DVM in kOhm
const float conversionFactor = 1 / ( R2 / ( R1 + R2));
const float adsMultiplier = 0.0001875;

float actualPower;                                  // power drain
float ampsSource;                                   // actual current draw
float totalCapacity;                                // capacity used
float totalEnergy;                                  // used energy
float voltSource;                                   // output voltage

unsigned long avgCurrentValue;                      // added value read from the acs module
unsigned long avgVoltageValue;
unsigned long currMs;
unsigned long prevMs;
unsigned long prevCapacityMs;
unsigned long prevEnergyMs;

ADS1115 ads( 0x48);                                 // invoke library, address pin to ground
TFT_ST7735 tft = TFT_ST7735();                      // invoke library, pins defined in User_Setup.h


void setup() {
  #if outputToSerial == 0                           // for debugging
    Serial.begin( 115200);
  #endif

  ads.begin();
  ads.setGain(0);

  tft.init();
  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK);

  tft.drawBitmap( 25, 9, startupBitmap, 110, 110, TFT_WHITE);
  delay( 2000);

  tft.fillScreen(TFT_BLACK);

  tft.drawRect(  0, 109, 80, 18, TFT_LIGHTGREY);
  tft.drawRect( 80, 109, 80, 18, TFT_LIGHTGREY);
}


void loop() {
  currMs = millis();

  getVoltageReading();
  getCurrentReading();
  calculatedValues();

  if( currMs - prevMs >= screenUpdateMs){
    infoToScreen();
    prevMs = currMs;
  }
}


void getVoltageReading(){
  for( int i = 0; i < 10; i++){
    rawVoltageRead = ads.readADC(1);
    avgVoltageValue += rawVoltageRead;
    delay( 3);                                      // TODO ditch the delay
  }

  voltSource = avgVoltageValue * 0.1 * adsMultiplier * conversionFactor;
  avgVoltageValue = 0;
}

/*
 * REMEMBER zero amps ACS712 starts at 1/2 Vcc on Out pin
 */
void getCurrentReading(){
  for( int i = 0; i < 10; i++){
    rawCurrentRead = ads.readADC(0);                // get reading from the sensor
    avgCurrentValue += rawCurrentRead;              // total the ampere readings
    delay( 3);                                      // TODO ditch the delay
  }

  ampsSource = (( avgCurrentValue * 0.1 * adsMultiplier) - ( voltArduino / 2)) * 10; // * 10 instead of / 0.1 for 20A version
  avgCurrentValue = 0;
}


void calculatedValues(){
  if( ampsSource < 0) ampsSource = 0;               // to get rid of negative values

  actualPower = voltSource * ampsSource;            // actual power calculation

  totalCapacity = totalCapacity + ( ampsSource * ( currMs - prevCapacityMs) * 0.00001 / 36); // calculate the energy put into the battery

  totalEnergy = totalEnergy + ( actualPower * ( currMs - prevEnergyMs) * 0.00001 / 36);

  prevCapacityMs = currMs;
  prevEnergyMs = currMs;

  #if outputToSerial == 1
    Serial.print( "Voltage\t\t"); Serial.println( voltSource);
    Serial.print( "Amperage\t"); Serial.println( ampsSource);
    Serial.print( "Actual power\t"); Serial.println( actualPower);
    Serial.print( "Capacity\t"); Serial.println( totalCapacity);
    Serial.print( "Energy\t\t"); Serial.println( totalEnergy); Serial.println();
  #endif  
}


void infoToScreen(){
  tft.setTextSize(1);
  
  tft.setTextColor(TFT_GREEN, TFT_BLACK);
  dtostrf( voltSource, 6, 2, buf);
  tft.drawRightString( buf, 133, 4, 6);
  tft.drawString( "V", 139, 22, 4);

  tft.setTextColor(TFT_ORANGE, TFT_BLACK);
  dtostrf( ampsSource, 6, 2, buf);
  tft.drawRightString( buf, 133, 46, 6);
  tft.drawString( "A", 139, 64, 4);

  tft.setTextColor(TFT_CYAN, TFT_BLACK);
  dtostrf( actualPower, 6, 1, buf);
  pwrVar[0] = '\0';
  strcpy( pwrVar, buf);
  strcat( pwrVar, " W");
  tft.drawCentreString( pwrVar, 80, 90, 2);

  tft.setTextColor(TFT_YELLOW, TFT_BLACK);
  dtostrf( totalCapacity, 6, 2, buf);
  capVar[0] = '\0';
  strcpy( capVar, buf);
  strcat( capVar, " Ah");
  tft.drawRightString( capVar, 76, 110, 2);

  dtostrf( totalEnergy, 6, 2, buf);
  capVar[0] = '\0';
  strcpy( nrgVar, buf);
  strcat( nrgVar, " Wh");
  tft.drawRightString( nrgVar, 156, 110, 2);
}
